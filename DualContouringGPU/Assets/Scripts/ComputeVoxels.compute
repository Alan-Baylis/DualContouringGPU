#pragma kernel ComputeMaterials
#pragma kernel ComputeCorners
#pragma kernel AddLength
#pragma kernel ComputePositions
#pragma kernel ComputeVoxels

struct GPUVOX
{
	float3 vertPoint;
	float3 avgNormal;
	int numPoints;
};

struct DensityPrimitive
{
	int type;
	int csg;
	float3 position;
	float3 size;
};

RWStructuredBuffer<uint> cornerMaterials;
RWStructuredBuffer<uint> voxelMaterials;
RWStructuredBuffer<uint> cornerIndexes;
RWStructuredBuffer<float3> voxMins;
RWStructuredBuffer<GPUVOX> voxels;

RWStructuredBuffer<int> cornerCount;
RWStructuredBuffer<int> finalCount;

RWStructuredBuffer<int> Perm;

RWStructuredBuffer<DensityPrimitive> primitiveMods;
int primitiveModCount;

int resolution;
int octreeSize;
float3 chunkPosition;

static float3 CHILD_MIN_OFFSETS[8] =
{
	float3(0, 0, 0),
	float3(0, 0, 1),
	float3(0, 1, 0),
	float3(0, 1, 1),
	float3(1, 0, 0),
	float3(1, 0, 1),
	float3(1, 1, 0),
	float3(1, 1, 1)
};

static int2 edgevmap[12] =
{
	int2(0,4), int2(1,5), int2(2,6), int2(3,7),
	int2(0,2), int2(1,3), int2(4,6), int2(5,7),
	int2(0,1), int2(2,3), int2(4,5), int2(6,7)
};

static float3 Grad3[] = {
	float3(1,1,0), float3(-1,1,0), float3(1,-1,0), float3(-1,-1,0),
	float3(1,0,1), float3(-1,0,1), float3(1,0,-1), float3(-1,0,-1),
	float3(0,1,1), float3(0,-1,1), float3(0,1,-1), float3(0,-1,-1)
};

#define HIGHEST_RESOLUTION 64
#define SVD_NUM_SWEEPS 4
#define COUNT 5
#define PSUEDO_INVERSE_THRESHOLD 1e-6f

typedef float mat3x3[3][3];
typedef float mat3x3_tri[6];


// SVD
/////////////////////////////////////////////////

void svd_mul_matrix_vec(inout float4 result, mat3x3 a, float4 b)
{
	result.x = dot(float4(a[0][0], a[0][1], a[0][2], 0.0f), b);
	result.y = dot(float4(a[1][0], a[1][1], a[1][2], 0.0f), b);
	result.z = dot(float4(a[2][0], a[2][1], a[2][2], 0.0f), b);
	result.w = 0.0f;
}

void givens_coeffs_sym(float a_pp, float a_pq, float a_qq, inout float c, inout float s)
{
	if (a_pq == 0.0f)
	{
		c = 1.0f;
		s = 0.0f;
		return;
	}
	
	float tau = (a_qq - a_pp) / (2.0f * a_pq);
	float stt = sqrt(1.0f + tau * tau);
	float tan = 1.0f / ((tau >= 0.0f) ? (tau + stt) : (tau - stt));
	c = rsqrt(1.0f + tan * tan);
	s = tan * c;
}

void svd_rotate_xy(inout float x, inout float y, float c, float s)
{
	float u = x; float v = y;
	x = c * u - s * v;
	y = s * u + c * v;
}

void svd_rotateq_xy(inout float x, inout float y, inout float a, float c, float s)
{
	float cc = c * c; float ss = s * s;
	float mx = 2.0f * c * s * a;
	float u = x; float v = y;
	x = cc * u - mx + ss * v;
	y = ss * u + mx + cc * v;
}

void svd_rotate(inout mat3x3 vtav, mat3x3 v, int a, int b)
{
	if (vtav[a][b] == 0.0f) return;
	
	float c, s;
	givens_coeffs_sym(vtav[a][a], vtav[a][b], vtav[b][b], c, s);
	
	float x, y, z;
	x = vtav[a][a]; y = vtav[b][b]; z = vtav[a][b];
	svd_rotateq_xy(x, y, z, c, s);
	vtav[a][a] = x; vtav[b][b] = y; vtav[a][b] = z;
	
	x = vtav[0][3-b]; y = vtav[1-a][2];
	svd_rotate_xy(x, y, c, s);
	vtav[0][3-b] = x; vtav[1-a][2] = y;
	
	vtav[a][b] = 0.0f;
	
	x = v[0][a]; y = v[0][b];
	svd_rotate_xy(x, y, c, s);
	v[0][a] = x; v[0][b] = y;
	
	x = v[1][a]; y = v[1][b];
	svd_rotate_xy(x, y, c, s);
	v[1][a] = x; v[1][b] = y;
	
	x = v[2][a]; y = v[2][b];
	svd_rotate_xy(x, y, c, s);
	v[2][a] = x; v[2][b] = y;
}

void svd_solve_sym(inout mat3x3_tri a, inout float4 sigma, mat3x3 v)
{
	mat3x3 vtav = { { 0.0f, 0.0f, 0.0f }, { 0.0f, 0.0f, 0.0f }, { 0.0f, 0.0f, 0.0f } };
	vtav[0][0] = a[0]; vtav[0][1] = a[1]; vtav[0][2] = a[2];
	vtav[1][0] = 0.0f;  vtav[1][1] = a[3]; vtav[1][2] = a[4];
	vtav[2][0] = 0.0f;  vtav[2][1] = 0.0f;  vtav[2][2] = a[5];
	
	for (int i = 0; i < SVD_NUM_SWEEPS; ++i)
	{
		svd_rotate(vtav, v, 0, 1);
		svd_rotate(vtav, v, 0, 2);
		svd_rotate(vtav, v, 1, 2);
	}
	
	sigma = float4(vtav[0][0], vtav[1][1], vtav[2][2], 0.0f);
}

float svd_invdet(float x, float tol)
{
	return (abs(x) < tol || abs(1.0f / x) < tol) ? 0.0f : (1.0f / x);
}

void svd_pseudoinverse(inout mat3x3 o, float4 sigma, mat3x3 v)
{
	float d0 = svd_invdet(sigma.x, PSUEDO_INVERSE_THRESHOLD);
	float d1 = svd_invdet(sigma.y, PSUEDO_INVERSE_THRESHOLD);
	float d2 = svd_invdet(sigma.z, PSUEDO_INVERSE_THRESHOLD);

	o[0][0] = v[0][0] * d0 * v[0][0] + v[0][1] * d1 * v[0][1] + v[0][2] * d2 * v[0][2];
	o[0][1] = v[0][0] * d0 * v[1][0] + v[0][1] * d1 * v[1][1] + v[0][2] * d2 * v[1][2];
	o[0][2] = v[0][0] * d0 * v[2][0] + v[0][1] * d1 * v[2][1] + v[0][2] * d2 * v[2][2];
	o[1][0] = v[1][0] * d0 * v[0][0] + v[1][1] * d1 * v[0][1] + v[1][2] * d2 * v[0][2];
	o[1][1] = v[1][0] * d0 * v[1][0] + v[1][1] * d1 * v[1][1] + v[1][2] * d2 * v[1][2];
	o[1][2] = v[1][0] * d0 * v[2][0] + v[1][1] * d1 * v[2][1] + v[1][2] * d2 * v[2][2];
	o[2][0] = v[2][0] * d0 * v[0][0] + v[2][1] * d1 * v[0][1] + v[2][2] * d2 * v[0][2];
	o[2][1] = v[2][0] * d0 * v[1][0] + v[2][1] * d1 * v[1][1] + v[2][2] * d2 * v[1][2];
	o[2][2] = v[2][0] * d0 * v[2][0] + v[2][1] * d1 * v[2][1] + v[2][2] * d2 * v[2][2];
}

void svd_solve_ATA_Atb(inout mat3x3_tri ATA, float4 Atb, inout float4 x)
{
	mat3x3 V = { { 1.0f, 0.0f, 0.0f }, { 0.0f, 1.0f, 0.0f }, { 0.0f, 0.0f, 1.0f } };
	
	float4 sigma = float4(0, 0, 0, 0);
	svd_solve_sym(ATA, sigma, V);
	
	mat3x3 Vinv = { { 0.0f, 0.0f, 0.0f }, { 0.0f, 0.0f, 0.0f }, { 0.0f, 0.0f, 0.0f } };
	svd_pseudoinverse(Vinv, sigma, V);
	svd_mul_matrix_vec(x, Vinv, Atb);
}

void svd_vmul_sym(inout float4 result, mat3x3_tri A, float4 v)
{
	float4 A_row_x = float4(A[0], A[1], A[2], 0);
	result.x = dot(A_row_x, v);
	result.y = A[1] * v.x + A[3] * v.y + A[4] * v.z;
	result.z = A[2] * v.x + A[4] * v.y + A[5] * v.z;
}

// QEF
/////////////////////////////////////////////////

void qef_add(float4 n, float4 p, inout mat3x3_tri ATA, inout float4 Atb, inout float4 pointaccum, inout float btb)
{
	ATA[0] += n.x * n.x;
	ATA[1] += n.x * n.y;
	ATA[2] += n.x * n.z;
	ATA[3] += n.y * n.y;
	ATA[4] += n.y * n.z;
	ATA[5] += n.z * n.z;
	
	float b = dot(p, n);
	Atb.x += n.x * b;
	Atb.y += n.y * b;
	Atb.z += n.z * b;
	btb += b * b;
	
	pointaccum.x += p.x;
	pointaccum.y += p.y;
	pointaccum.z += p.z;
	pointaccum.w += 1.0f;
}

float qef_calc_error(mat3x3_tri A, float4 x, float4 b)
{
	float4 tmp = float4(0, 0, 0, 0);
	svd_vmul_sym(tmp, A, x);
	tmp = b - tmp;
	
	return dot(tmp, tmp);
}

float qef_solve(mat3x3_tri ATA, float4 Atb, float4 pointaccum, inout float4 x)
{
	float4 masspoint = pointaccum / pointaccum.w;
	
	float4 A_mp = float4(0, 0, 0, 0);
	svd_vmul_sym(A_mp, ATA, masspoint);
	A_mp = Atb - A_mp;
	
	svd_solve_ATA_Atb(ATA, A_mp, x);
	
	float error = qef_calc_error(ATA, x, Atb);
	x += masspoint;
	
	return error;
}

static float Box(float3 worldPosition, float3 origin, float3 halfDimensions)
{
	float3 local_pos = worldPosition - origin;
	float3 pos = local_pos;

	float3 d = float3(abs(pos.x), abs(pos.y), abs(pos.z)) - halfDimensions;
	float m = max(d.x, max(d.y, d.z));
	return min(m, length(max(d, float3(0, 0, 0))));
}

static float Sphere(float3 worldPosition, float3 origin, float radius)
{
	return length(worldPosition - origin) - radius;
}

static float Cylinder(float3 worldPosition, float3 origin, float3 size)
{
	float3 p = worldPosition - origin;
	
	if (Box(worldPosition, origin, size) > 0.0f)
		return 1;
	
	float sqr_dist = (p.x * p.x + p.z * p.z);
	float sqr_rad = size.x * size.x;
	return sqr_dist - sqr_rad;
}

static float Torus(float3 worldPosition, float3 origin)
{
	float3 local_pos = worldPosition - origin;
	float xt = local_pos.x;
	float yt = local_pos.y;
	float zt = local_pos.z;
	float _radius = 10.0f;
	float _radius2 = 2.33f;

	float x = xt;
	float y = yt;
	float z = zt;

	float x2 = sqrt(x * x + z * z) - _radius / 2.0f;
	float d = x2 * x2 + y * y - _radius2 * _radius2;

	return d;
}

static float Perlin(float x, float y)
{
	int i = x > 0 ? (int)x : (int)x - 1;
	int j = y > 0 ? (int)y : (int)y - 1;
	
	x = x - i;
	y = y - j;
	
	i = i & 255;
	j = j & 255;
	
	int gll = (uint) Perm[i + Perm[j]] % 12;
	int glh = (uint) Perm[i + Perm[j + 1]] % 12;
	int ghl = (uint) Perm[i + 1 + Perm[j]] % 12;
	int ghh = (uint) Perm[i + 1 + Perm[j + 1]] % 12;
	
	float nll = (Grad3[gll].x * x) + (Grad3[gll].y * y);
	float nlh = (Grad3[glh].x * x) + (Grad3[glh].y * (y - 1));
	float nhl = (Grad3[ghl].x * (x - 1)) + (Grad3[ghl].y * y);
	float nhh = (Grad3[ghh].x * (x - 1)) + (Grad3[ghh].y * (y - 1));
	
	float u = (float)(x * x * x * (x * (x * 6 - 15) + 10));
	float v = (float)(y * y * y * (y * (y * 6 - 15) + 10));
	
	//float nyl = Mathf.Lerp(nll, nhl, u);
	float nyl = (1-u)*nll + u*nhl;
	//float nyh = Mathf.Lerp(nlh, nhh, u);
	float nyh = (1-u)*nlh + u*nhh;
	
	//float nxy = Mathf.Lerp(nyl, nyh, v);
	float nxy = (1-v)*nyl + v*nyh;
	
	return nxy;
}

static float Vec3Dot(float3 a, float3 b)
{
	float res = (a.x * b.x) + (a.y * b.y) + (a.z * b.z);
	return res;
}

static float Perlin(float x, float y, float z)
{
	int X = x > 0 ? (int)x : (int)x - 1;
	int Y = y > 0 ? (int)y : (int)y - 1;
	int Z = z > 0 ? (int)z : (int)z - 1;
	
	x = x - X;
	y = y - Y;
	z = z - Z;
	
	X = X & 255;
	Y = Y & 255;
	Z = Z & 255;
	
	int gi000 = (uint) Perm[X + Perm[Y + Perm[Z]]] % 12;
	int gi001 = (uint) Perm[X + Perm[Y + Perm[Z + 1]]] % 12;
	int gi010 = (uint) Perm[X + Perm[Y + 1 + Perm[Z]]] % 12;
	int gi011 = (uint) Perm[X + Perm[Y + 1 + Perm[Z + 1]]] % 12;
	int gi100 = (uint) Perm[X + 1 + Perm[Y + Perm[Z]]] % 12;
	int gi101 = (uint) Perm[X + 1 + Perm[Y + Perm[Z + 1]]] % 12;
	int gi110 = (uint) Perm[X + 1 + Perm[Y + 1 + Perm[Z]]] % 12;
	int gi111 = (uint) Perm[X + 1 + Perm[Y + 1 + Perm[Z + 1]]] % 12;
	
	float n000 = Vec3Dot(Grad3[gi000], float3(x, y, z));
	float n100 = Vec3Dot(Grad3[gi100], float3(x - 1, y, z));
	float n010 = Vec3Dot(Grad3[gi010], float3(x, y - 1, z));
	float n110 = Vec3Dot(Grad3[gi110], float3(x - 1, y - 1, z));
	float n001 = Vec3Dot(Grad3[gi001], float3(x, y, z - 1));
	float n101 = Vec3Dot(Grad3[gi101], float3(x - 1, y, z - 1));
	float n011 = Vec3Dot(Grad3[gi011], float3(x, y - 1, z - 1));
	float n111 = Vec3Dot(Grad3[gi111], float3(x - 1, y - 1, z - 1));
	
	float u = (float)(x * x * x * (x * (x * 6 - 15) + 10));
	float v = (float)(y * y * y * (y * (y * 6 - 15) + 10));
	float w = (float)(z * z * z * (z * (z * 6 - 15) + 10));
	
	float nx00 = lerp(n000, n100, u);
	float nx01 = lerp(n001, n101, u);
	float nx10 = lerp(n010, n110, u);
	float nx11 = lerp(n011, n111, u);
	
	float nxy0 = lerp(nx00, nx10, v);
	float nxy1 = lerp(nx01, nx11, v);
	
	
	float nxyz = lerp(nxy0, nxy1, w);
	
	return nxyz;
}

static float FractalNoise(int octaves, float frequency, float lacunarity, float persistence, float2 position)
{
	float SCALE = 1.0f / 128.0f;
	float2 p = position * SCALE;
	float nois = 0.0f;

	float amplitude = 1.0f;
	p *= frequency;

	for (int i = 0; i < octaves; i++)
	{
		nois += Perlin(p.x, p.y) * amplitude;
		p *= lacunarity;
		amplitude *= persistence;
	}
	
	return 0.5f + (0.5f * nois);
}

static float FractalNoise(int octaves, float frequency, float lacunarity, float persistence, float3 position)
{
	float SCALE = 1.0f / 128.0f;
	float3 p = position * SCALE;
	float nois = 0.0f;

	float amplitude = 1.0f;
	p *= frequency;

	for (int i = 0; i < octaves; i++)
	{
		nois += Perlin(p.x, p.y, p.z) * amplitude;
		p *= lacunarity;
		amplitude *= persistence;
	}
	
	return nois;
}

static float FractalNoise(float frequency, float lacunarity, float persistence, float3 position)
{
	float SCALE = 1.0f / 128.0f;
	float3 p = position * SCALE;
	float nois = 0.0f;

	float amplitude = 1.0f;
	p *= frequency;
	
	nois += Perlin(p.x, p.y, p.z) * amplitude;
	p *= lacunarity;
	amplitude *= persistence;
	
	return nois;
}

static float CalculateNoiseValue(float3 pos, float scale)
{
	return FractalNoise(4, 0.5343f, 2.2324f, 0.68324f, pos * scale);
}

static float CLerp(float a, float b, float t)
{
	return (1 - t) * a + t * b;
}




static float Density_Func(float3 worldPosition)
{
	float worldRadius = 200.0f;
	float3 world = worldPosition - float3(0, -worldRadius, 0);
	float worldDist = -worldRadius + length(world);

	float flatlandNoiseScale = 1.0f;
	float flatlandLerpAmount = 0.07f;
	float flatlandYPercent = 1.2f;

	float rockyNoiseScale = 1.5f;
	float rockyLerpAmount = 0.05f;
	float rockyYPercent = 0.7f;
	
	float maxMountainMixLerpAmount = 0.075f;
	float minMountainMixLerpAmount = 1.0f;
	
	float mountainBlend = 0.0f;
	float rockyBlend = 1.0f;
	
	mountainBlend = saturate(abs(FractalNoise(0.5343f, 2.2324f, 0.68324f, world * 0.11f)) * 4.0f);
	
	//float rockiness = abs(FractalNoise(0.5343f, 2.2324f, 0.68324f, world * 0.05f) * 2.0f);
	//rockyBlend = saturate(rockiness);
	
	//if (worldPosition.y < -15.0f)
		//mountainBlend = 0;
	
	
	float mountain = CalculateNoiseValue(world, 0.07f);
	

	float blob = CalculateNoiseValue(world, flatlandNoiseScale + ((rockyNoiseScale - flatlandNoiseScale) * rockyBlend));
	blob = CLerp(blob, (worldDist) * (flatlandYPercent + ((rockyYPercent - flatlandYPercent) * rockyBlend)),
				flatlandLerpAmount + ((rockyLerpAmount - flatlandLerpAmount) * rockyBlend));
	
	
	
	float result = ((worldDist) / worldRadius) + CLerp(mountain, blob, minMountainMixLerpAmount + ((maxMountainMixLerpAmount - minMountainMixLerpAmount) * mountainBlend));
	
	
	for (int i = 0; i < primitiveModCount; i++)
	{
		float primitive = 0;
		bool primChosen = primitiveMods[i].type == 0 || primitiveMods[i].type == 1 || primitiveMods[i].type == 2;
		
		if (primChosen)
		{
			if (primitiveMods[i].type == 0)
			{
				primitive = Box(worldPosition, primitiveMods[i].position, primitiveMods[i].size);
			}
			else if (primitiveMods[i].type == 1)
			{
				primitive = Sphere(worldPosition, primitiveMods[i].position, primitiveMods[i].size.x);
			}
			else if (primitiveMods[i].type == 2)
			{
				primitive = Cylinder(worldPosition, primitiveMods[i].position, primitiveMods[i].size);
			}
		
			if (primitiveMods[i].csg == 0)
			{
				result = max(-primitive, result);
			}
			else
			{
				result = min(primitive, result);
			}
		}
	}
	
	return result;
}

static float3 ApproximateZeroCrossingPosition(float3 p0, float3 p1)
{
	float minValue = 100000.0f;
	float t = 0.0f;
	float currentT = 0.0f;
	float steps = 8;
	float increment = 1.0f / steps;
	while (currentT <= 1.0f)
	{
		float3 p = p0 + ((p1 - p0) * currentT);
		float density = abs(Density_Func(p));
		if (density < minValue)
		{
			minValue = density;
			t = currentT;
		}

		currentT += increment;
	}

	return p0 + ((p1 - p0) * t);
}

static float3 CalculateSurfaceNormal(float3 p)
{
	float H = 0.001f;
	float dx = Density_Func(p + float3(H, 0.0f, 0.0f)) - Density_Func(p - float3(H, 0.0f, 0.0f));
	float dy = Density_Func(p + float3(0.0f, H, 0.0f)) - Density_Func(p - float3(0.0f, H, 0.0f));
	float dz = Density_Func(p + float3(0.0f, 0.0f, H)) - Density_Func(p - float3(0.0f, 0.0f, H));

	return normalize(float3(dx, dy, dz));
}

[numthreads(9,8,8)]
void ComputeMaterials (int3 threadID : SV_GroupThreadID, int3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
	uint thIndex = id.x + 9 * (id.y + 8 * id.z);
	
	float fR = (float) (resolution + 1);
	float sqRTRC = sqrt((fR * fR * fR));
	int sqRTRes = (int) sqRTRC;
	if (sqRTRC > (float) sqRTRes)
	{
		sqRTRes = sqRTRes + 1;
	}
	
	int nodeSize = (int) ((uint) HIGHEST_RESOLUTION) / ((uint) octreeSize);
	
	if (thIndex < (uint) sqRTRes)
	{
		uint ures = (uint) (resolution + 1);
		
		for (int i = 0; i < sqRTRes; i++)
		{
			uint index = (thIndex * (uint) sqRTRes) + i;
			uint z = round(index / (ures * ures));
			uint y = round((index - z * ures * ures) / ures);
			uint x = index - ures * (y + ures * z);
			
			float3 cornerPos = float3((float) x * nodeSize, (float) y * nodeSize, (float) z * nodeSize);
			float density = Density_Func(cornerPos + chunkPosition);
			uint material = density < 0.0f ? 1 : 0;
			cornerMaterials[x + ures * (y + ures * z)] = material;
		}
	}
}

[numthreads(8,8,8)]
void ComputeCorners (int3 threadID : SV_GroupThreadID, int3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
	uint thIndex = id.x + 8 * (id.y + 8 * id.z);
	float fR = (float) resolution;
	float sqRTRC = sqrt((fR * fR * fR));
	int sqRTRes = (int) sqRTRC;
	if (sqRTRC > (float) sqRTRes)
	{
		sqRTRes = sqRTRes + 1;
	}
	
	int nodeSize = (int) ((uint) HIGHEST_RESOLUTION) / ((uint) octreeSize);
	
	if (thIndex < (uint) sqRTRes)
	{
		uint ures = (uint) resolution;
		
		for (int i = 0; i < sqRTRes; i++)
		{
			uint index = (thIndex * (uint) sqRTRes) + i;
			uint z = round(index / (ures * ures));
			uint y = round((index - z * ures * ures) / ures);
			uint x = index - ures * (y + ures * z);
			
			uint corners = 0;
			for (int j = 0; j < 8; j++)
			{
				uint3 nodePos = uint3(x, y, z);
				uint3 cornerPos = nodePos + uint3(CHILD_MIN_OFFSETS[j].x, CHILD_MIN_OFFSETS[j].y, CHILD_MIN_OFFSETS[j].z);
				uint material = cornerMaterials[cornerPos.x + (ures + 1) * (cornerPos.y + (ures + 1) * cornerPos.z)];
				corners |= (material << j);
			}
			
			voxelMaterials[x + ures * (y + ures * z)] = corners;
			
			if (corners != 0 && corners != 255)
			{
				cornerCount[thIndex] = cornerCount[thIndex] + 1;
			}
		}
	}
}

[numthreads(1,1,1)]
void AddLength (int3 threadID : SV_GroupThreadID, int3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
	float fR = (float) resolution;
	float sqRTRC = sqrt((fR * fR * fR));
	int sqRTRes = (int) sqRTRC;
	if (sqRTRC > (float) sqRTRes)
	{
		sqRTRes = sqRTRes + 1;
	}
	
	for (int i = 0; i < sqRTRes; i++)
	{
		finalCount[0] += cornerCount[i];
	}
}

[numthreads(8,8,8)]
void ComputePositions (int3 threadID : SV_GroupThreadID, int3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
	uint thIndex = (uint) id.x + 8 * ((uint) id.y + 8 * (uint) id.z);
	
	float fR = (float) resolution;
	float sqRTRC = sqrt((fR * fR * fR));
	int sqRTRes = (int) sqRTRC;
	if (sqRTRC > (float) sqRTRes)
	{
		sqRTRes = sqRTRes + 1;
	}
	
	if (thIndex < (uint) sqRTRes)
	{
		uint pre = 0;
		for (uint c = 0; c < thIndex; c++)
		{
			pre += cornerCount[c];
		}
		
		uint ures = (uint) resolution;
		
		uint count = 0;
		for (int i = 0; i < sqRTRes; i++)
		{
			uint index = (thIndex * (uint) sqRTRes) + i;
			uint z = round(index / (ures * ures));
			uint y = round((index - z * ures * ures) / ures);
			uint x = index - ures * (y + ures * z);
			
			uint corners = voxelMaterials[x + ures * (y + ures * z)];
			
			if (corners != 0 && corners != 255)
			{
				cornerIndexes[pre + count] = x + ures * (y + ures * z);
				count++;
			}
		}
	}
}

[numthreads(128,1,1)]
void ComputeVoxels (int3 threadID : SV_GroupThreadID, int3 groupID : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
	int trueIndex = id.x;
	int count = (int) finalCount[0];
	
	if (trueIndex < count)
	{
		uint ures = (uint) resolution;
		
		int nodeSize = (int) ((uint) HIGHEST_RESOLUTION) / ((uint) octreeSize);
	
		uint voxelIndex = cornerIndexes[trueIndex];
		uint z = round(voxelIndex / (ures * ures));
		uint y = round((voxelIndex - z * ures * ures) / ures);
		uint x = voxelIndex - ures * (y + ures * z);

		uint corners = voxelMaterials[(int) voxelIndex];

		float3 nodePos = float3((float) x * nodeSize, (float) y * nodeSize, (float) z * nodeSize) + chunkPosition;
		voxMins[trueIndex] = nodePos;

		int MAX_CROSSINGS = 6;
		int edgeCount = 0;
		
		float4 pointaccum = float4(0, 0, 0, 0);
		mat3x3_tri ATA = { 0, 0, 0, 0, 0, 0 };
		float4 Atb = float4(0, 0, 0, 0);
		float3 averageNormal = float3(0, 0, 0);
		float btb = 0;

		for (int j = 0; j < 12 && edgeCount <= MAX_CROSSINGS; j++)
		{
			int c1 = edgevmap[j].x;
			int c2 = edgevmap[j].y;

			int m1 = (corners >> c1) & 1;
			int m2 = (corners >> c2) & 1;
			
			if (!((m1 == 0 && m2 == 0) || (m1 == 1 && m2 == 1)))
			{
				float3 p1 = nodePos + (CHILD_MIN_OFFSETS[c1] * nodeSize);
				float3 p2 = nodePos + (CHILD_MIN_OFFSETS[c2] * nodeSize);
				float3 p = ApproximateZeroCrossingPosition(p1, p2);
				float3 n = CalculateSurfaceNormal(p);
				
				qef_add(float4(n.x, n.y, n.z, 0), float4(p.x, p.y, p.z, 0), ATA, Atb, pointaccum, btb);
				
				averageNormal += n;
				
				edgeCount++;
			}
		}
		
		averageNormal = normalize(averageNormal / edgeCount);
		
		cornerIndexes[trueIndex] = corners;
		
		float3 com = float3(pointaccum.x, pointaccum.y, pointaccum.z) / pointaccum.w;
		float4 solved_position = float4(0, 0, 0, 0);
		
		if (nodeSize == 1)
		{
			float error = qef_solve(ATA, Atb, pointaccum, solved_position);
			
			float3 Min = nodePos;
			float3 Max = nodePos + float3(1.0f, 1.0f, 1.0f);
			if (solved_position.x < Min.x || solved_position.x > Max.x ||
			    solved_position.y < Min.y || solved_position.y > Max.y ||
			    solved_position.z < Min.z || solved_position.z > Max.z)
			{
				solved_position.x = com.x;
				solved_position.y = com.y;
				solved_position.z = com.z;
			}
		}
		else
		{
			solved_position.x = com.x;
			solved_position.y = com.y;
			solved_position.z = com.z;
		}
		
		voxels[trueIndex].vertPoint = float3(solved_position.x, solved_position.y, solved_position.z);
		voxels[trueIndex].avgNormal = averageNormal;
		voxels[trueIndex].numPoints = edgeCount;
	}
}